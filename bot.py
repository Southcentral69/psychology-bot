import os
print("TELEGRAM_TOKEN =", os.getenv("TELEGRAM_TOKEN"))

import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if TELEGRAM_TOKEN is None:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
if OPENROUTER_API_KEY is None:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
def create_prompt(user_input):
    return f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–ª –≤ —Ç—Ä—É–¥–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.
–ì–æ–≤–æ—Ä–∏ –¥–æ–±—Ä—ã–º, –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. –£—Å–ø–æ–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏, –Ω–µ –æ—Å—É–∂–¥–∞–π.
–ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ —É–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞—Å–∏–ª–∏–µ –∏–ª–∏ —Å—Ç—Ä–∞—Ö ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–∑—Ä–æ—Å–ª—ã–º, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –¥–æ–≤–µ—Ä—è–µ—Ç.

–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞:
\"\"\"{user_input}\"\"\"
"""

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter
async def ask_openrouter(message_text: str) -> str:
    prompt = create_prompt(message_text)
    url = "https://openrouter.ai/api/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/Southcentral69/psychology-bot",
        "X-Title": "telegram-psychology-bot"
    }

    payload = {
        "model": "mistralai/mistral-7b-instruct",  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            data = await response.json()
            if "choices" in data:
                return data["choices"][0]["message"]["content"]
            elif "error" in data:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {data['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                return "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∏, –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç üß†\n"
        "–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_text = message.text
    await message.answer("–Ø –¥—É–º–∞—é... üí≠")
    response = await ask_openrouter(user_text)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
