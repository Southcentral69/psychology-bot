import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart

# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏ —Å—é–¥–∞
TELEGRAM_TOKEN = ""
OPENROUTER_API_KEY = ""

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üß† –†—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
def create_prompt(user_input):
    return f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ç—Ä—É–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.

–ì–æ–≤–æ—Ä–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º, –¥–æ–±—Ä–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º. –ü–æ–º–æ–≥–∞–π –ø–æ–Ω—è—Ç—å —á—É–≤—Å—Ç–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –Ω–µ –æ—Å—É–∂–¥–∞–π.

–ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –µ–≥–æ –±—å—é—Ç, –æ–±–∏–∂–∞—é—Ç –∏–ª–∏ –æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞—Ö, –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ–Ω –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, –∏ –ø–æ–¥—Å–∫–∞–∂–∏, –∫ –∫–æ–º—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è (—Ä–æ–¥–∏—Ç–µ–ª–∏, —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –≤–∑—Ä–æ—Å–ª—ã–µ, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –¥–æ–≤–µ—Ä—è–µ—Ç).

–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–±—ë–Ω–∫–∞:
\"\"\"{user_input}\"\"\"
"""

# üì° –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
async def ask_openrouter(message_text: str) -> str:
    prompt = create_prompt(message_text)
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistralai/mistral-7b-instruct",  # –¥–µ—à—ë–≤–∞—è –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            data = await response.json()
            if "choices" in data:
                return data["choices"][0]["message"]["content"]
            elif "error" in data:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {data['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                return "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥–æ–±—Ä—ã–π –¥—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥ ü§ó\n"
        "–¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –ø–æ–º–æ—á—å."
    )

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def handle_message(message: Message):
    user_text = message.text
    await message.answer("–î—É–º–∞—é... üí≠")
    response = await ask_openrouter(user_text)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
