import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from openai import OpenAI

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
if not OPENROUTER_API_KEY:
    raise ValueError("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
)

# –ü—Ä–æ–º–ø—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚Äî –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –±–æ—Ç
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å —Ä–µ–±—ë–Ω–∫–æ–º. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ, –≤—ã—Å–ª—É—à–∞—Ç—å, –ø–æ–º–æ—á—å –ø–æ–Ω—è—Ç—å –∏ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. "
    "–û—Ç–≤–µ—á–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –º—è–≥–∫–∏–º —Ç–æ–Ω–æ–º. –ù–µ –æ—Å—É–∂–¥–∞–π. "
    "–ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞—Å–∏–ª–∏–∏ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–µ ‚Äî —É—Å–ø–æ–∫–æ–π –µ–≥–æ, –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ–Ω –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, "
    "–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–∑—Ä–æ—Å–ª–æ–º—É, –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –¥–æ–≤–µ—Ä—è–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª—é, —É—á–∏—Ç–µ–ª—é, –ø—Å–∏—Ö–æ–ª–æ–≥—É)."
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç ü§ó\n"
        "–¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.\n"
        "–Ø –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ‚ù§Ô∏è"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def handle_message(message: Message):
    user_input = message.text
    thinking = await message.answer("–Ø –¥—É–º–∞—é‚Ä¶ ‚è≥")

    try:
        response = client.chat.completions.create(
            model="mistralai/mistral-7b-instruct",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ]
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∏, —è —Å–µ–π—á–∞—Å –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
    finally:
        await thinking.delete()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
