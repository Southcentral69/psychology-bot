import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import BotCommand
from aiogram import Router
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter (—á–µ—Ä–µ–∑ openai-–±–∏–±–ª–∏–æ—Ç–µ–∫—É)
openai.api_key = OPENROUTER_API_KEY
openai.base_url = "https://openrouter.ai/api/v1"

# –ü—Ä–æ–º–ø—Ç ‚Äî –∫—Ç–æ —Ç—ã, –∫–∞–∫ —Å–µ–±—è –≤–µ—Å—Ç–∏
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –¥–µ—Ç—å–º–∏. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –º—è–≥–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. "
    "–ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –Ω–∞—Å–∏–ª–∏–µ, —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —à–∞–≥–∏: –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–∑—Ä–æ—Å–ª–æ–º—É, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É –∏–ª–∏ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é."
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ. –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç üí¨"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def handle_message(message: Message):
    user_input = message.text

    try:
        response = openai.ChatCompletion.create(
            model="mistralai/mistral-7b-instruct",  # –ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ]
        )

        reply = response['choices'][0]['message']['content']
        await message.answer(reply)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(main())
